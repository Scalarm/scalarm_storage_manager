# Attributes:
#_id: id
#experiment_id: ObjectId - same as _id
#name: user specified name
#description: (optional) a longer description of the experiment
#is_running: bool
#simulation_id: id of a simulation which is executed during the experiment
#user_id: ObjectId
#time_constraint_in_sec: integer - threshold for simulation execution
#experiment_input: JSON structure defining parametrization of the used simulation 
# - basically it is an extended version of a simulation input structure; extended with information about parametrization of each parameter 
#   -  "parametrizationType" : "value",      "in_doe" : false
#doe_info: information about used DoE methods - an array of triples, [ doe_method_id, array_of_parameter_ids, array_of_lists_with_values_for_each_simulation ]
#scheduling_policy: string -
#run_counter: integer - how many times each simulation should be executed
#labels: (dynamic) string - concatenated list of parameter ids
#“cached_value_list”: a utilization array of values of each parameter
#“start_at”: when the experiment has been created
#“end_at”: when the user clicked “Stop”
#“size”: (cache) the number of all simulations
#“cached_multiple_list”: (cache) a list of integers generated by multiplying sizes of subsequent parameter values
#shared_with: a list of user ids with whom this experiment is shared
#replication_level: integer value denoting how many times each simulation run should be repeated

require 'scalarm/database/model/experiment'

class Experiment < Scalarm::Database::Model::Experiment

  def shared_with?(user)
    (not self.shared_with.nil?) and self.shared_with.include?(user.id)
  end

  def owned_by?(user)
    self.user_id == user.id
  end 

end